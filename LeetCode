class Solution {
    private int[][] mainIsland;
    private int islandSize=0;
    public class IslandNode{
        private int landNumber = 0;
        private int[] position;
        protected IsLandNode fatherNode;
        IslandNode(IslandNode papa,int[] scandDirection){
            this.fatherNode=papa;
            this.landNumber=papa.landNumber;
            this.position=[papa.position[0]+scandDirection[0],papa.position[1]+scandDirection[1]];
        }
        IslandNode(int[] pointPos,int islandId){
            this.position=pointPos;
            this.landNumber=islandId;
        }
        void setLandID(int landNum){
            this.landNumber=landNum;
        }
    }
    public int largestIsland(int[][] grid) {
        this.mainIsland = grid;
        ArrayList<IslandNode> islandList;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(this.mainIsland[i][j]!=0){
                    IslandNode newPoint = IslandNode([],islandList.length);
                    islandList.add(newPoint);
                    this.mainIsland[i][j]=0;
                    findIsolateIsland(newPoint);
                }
            }
        }
        
    }
    private int[][] findIsolateIsland(IslandNode fatherPoint,int[] scandDirection=[0,0]){
        int[] scanPoint=fatherPoint.position;
        int[] direction=[-1*scanDirection[0],0];
        if(direction[0]!=0 && this.mainIsland[scanPoint[0]+direction[0]][scanPoint[0]]==1){
            IslandNode newPoint = IslandNode(fatherPoint,direction);
            this.mainIsland[scanPoint[0]+direction[0]][scanPoint[0]]=0;
            findIsolateIsland(newPoint,direction);
        }
        #if四个方向上都scan了，然后四个方向迭代。
    }
}